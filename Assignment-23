1. Use iter and next method to access all the elements of a given set using while loop.
my_set = {1, 2, 3, 4, 5}
iterator = iter(my_set)

while True:
    try:
        element = next(iterator)
        print(element)
    except StopIteration:
        break

2. Create a generator to produce first n odd natural numbers.
def generate_odd_numbers(n):
    num = 1
    count = 0
    while count < n:
        yield num
        num += 2
        count += 1

# Usage:
odd_gen = generate_odd_numbers(5)
for num in odd_gen:
    print(num)

3. Create a generator to produce first n even natural numbers.
def generate_even_numbers(n):
    num = 2
    count = 0
    while count < n:
        yield num
        num += 2
        count += 1

# Usage:
even_gen = generate_even_numbers(5)
for num in even_gen:
    print(num)

4. Create a generator to produce squares of first N natural numbers.
def generate_square_numbers(n):
    num = 1
    count = 0
    while count < n:
        yield num ** 2
        num += 1
        count += 1

# Usage:
square_gen = generate_square_numbers(5)
for num in square_gen:
    print(num)

5. Create a generator to produce first n terms of Fibonacci series.
def generate_fibonacci_numbers(n):
    a, b = 0, 1
    count = 0
    while count < n:
        yield a
        a, b = b, a + b
        count += 1

# Usage:
fibonacci_gen = generate_fibonacci_numbers(5)
for num in fibonacci_gen:
    print(num)

6. Create a generator to produce first n prime numbers.
def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
    return True

def generate_prime_numbers(n):
    num = 2
    count = 0
    while count < n:
        if is_prime(num):
            yield num
            count += 1
        num += 1

# Usage:
prime_gen = generate_prime_numbers(5)
for num in prime_gen:
    print(num)

7. Create an endless iterator using generator method to produce terms of Fibonacci series.
def generate_endless_fibonacci():
    a, b = 0, 1
    while True:
        yield a
        a, b = b, a + b

# Usage:
endless_fibonacci_gen = generate_endless_fibonacci()
for num in endless_fibonacci_gen:
    print(num)

8. Create an endless iterator using generator method to produce Prime numbers.
def generate_endless_primes():
    num = 2
    while True:
        if is_prime(num):
            yield num
        num += 1

# Usage:
endless_prime_gen = generate_endless_primes()
for num in endless_prime_gen:
    print(num)

9. Define a function which takes lengths of three sides of a triangle as arguments and
display the perimeter or triangle. Define and apply a decorator which checks for the
validity of the triangle on the basis of lengths of the side. This makes the perimeter 
to be displayed when the triangle can exist with the given lengths of the sides.

def is_valid_triangle(func):
    def wrapper(a, b, c):
        if a + b > c and a + c > b and b + c > a:
            return func(a, b, c)
        else:
            return "Invalid Triangle"
    return wrapper

@is_valid_triangle
def calculate_perimeter(a, b, c):
    return a + b + c

# Usage:
result = calculate_perimeter(3, 4, 5)  # Valid triangle

10. Define a function which calculates HCF of two numbers. Define and apply a
decorator to check whether two given numbers are co-prime or not.

def is_coprime(func):
    def wrapper(a, b):
        def gcd(x, y):
            while y:
                x, y = y, x % y
            return x
        
        if gcd(a, b) == 1:
            return func(a, b)
        else:
            return "Numbers are not co-prime"
    return wrapper

@is_coprime
def calculate_hcf(a, b):
    while b:
        a, b = b, a % b
    return a

# Usage:
result = calculate_hcf(8, 15)  # Co-prime numbers
