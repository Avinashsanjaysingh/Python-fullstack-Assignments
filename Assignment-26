1. Write a python script to multiple 2 or 3 or 4 numbers with a single multiply method in a class using method overloading.
class Multiplier:
    def multiply(self, *args):
        result = 1
        for num in args:
            result *= num
        return result

2. Write a python script to create a user account class with 2 instance variables (userid
and balance). Create 3 user objects and add all the users using operator overloading.

class UserAccount:
    def __init__(self, userid, balance):
        self.userid = userid
        self.balance = balance
    
    def __add__(self, other):
        if isinstance(other, UserAccount):
            return UserAccount(f"{self.userid}_{other.userid}", self.balance + other.balance)
        else:
            raise TypeError("Invalid operand type")
    
    def __str__(self):
        return f"User ID: {self.userid}, Balance: {self.balance}"

user1 = UserAccount("user1", 1000)
user2 = UserAccount("user2", 1500)
user3 = UserAccount("user3", 500)

total_user = user1 + user2 + user3
print(total_user)

3. Write a python script to create a to print the above user account object using operator
overloading (hint __str__ method).

class UserAccount:
    def __init__(self, userid, balance):
        self.userid = userid
        self.balance = balance
    
    def __add__(self, other):
        if isinstance(other, UserAccount):
            return UserAccount(f"{self.userid}_{other.userid}", self.balance + other.balance)
        else:
            raise TypeError("Invalid operand type")
    
    def __str__(self):
        return f"User ID: {self.userid}, Balance: {self.balance}"

user1 = UserAccount("user1", 1000)
user2 = UserAccount("user2", 1500)
user3 = UserAccount("user3", 500)

total_user = user1 + user2 + user3
print(total_user)

4. Write a python script to create two Threads. First thread will print all Even numbers
and Second thread will print all Odd numbers till 100.
import threading

def print_even():
    for i in range(2, 101, 2):
        print(i)

def print_odd():
    for i in range(1, 101, 2):
        print(i)

t1 = threading.Thread(target=print_even)
t2 = threading.Thread(target=print_odd)

t1.start()
t2.start()

t1.join()
t2.join()

5. Write a python script to create 2 threads to add all the values from 1 to 100.
import threading

total = 0

def add_values(start, end):
    global total
    for i in range(start, end + 1):
        total += i

t1 = threading.Thread(target=add_values, args=(1, 50))
t2 = threading.Thread(target=add_values, args=(51, 100))

t1.start()
t2.start()

t1.join()
t2.join()

print("Total Sum:", total)

6. Write a python script to create 5 threads to fill a list with random numbers till 100.
import threading
import random

random_numbers = []

def fill_list():
    for _ in range(20):
        random_numbers.append(random.randint(1, 100))

threads = []

for _ in range(5):
    thread = threading.Thread(target=fill_list)
    thread.start()
    threads.append(thread)

for thread in threads:
    thread.join()

print("Random Numbers:", random_numbers)

7. Write a python script to create a clock where 1st thread will print the current time
every second and 2nd will print “1 Minute Completed” after every 1 minute.

import threading
import time

def print_current_time():
    while True:
        current_time = time.strftime("%H:%M:%S", time.localtime())
        print("Current Time:", current_time)
        time.sleep(1)

def print_one_minute_message():
    while True:
        print("1 Minute Completed")
        time.sleep(60)

t1 = threading.Thread(target=print_current_time)
t2 = threading.Thread(target=print_one_minute_message)

t1.start()
t2.start()

t1.join()
t2.join()

8. Write a python script to change the name of the Thread.
Threads in Python do not have a direct method to change their names after creation.

9. Write a python script to join 2 threads after printing completing the first Question.
# Assuming you have two threads t1 and t2
t1.start()
t2.start()

t1.join()
t2.join()

# After joining, you can continue with other tasks

10. Write a python script to check whether a given number is prime or armstrong number using 2 different threads.
import threading

def is_prime(num):
    # Prime number checking logic
    pass

def is_armstrong(num):
    # Armstrong number checking logic
    pass

num = 42  # Replace with the number you want to check

t1 = threading.Thread(target=is_prime, args=(num,))
t2 = threading.Thread(target=is_armstrong, args=(num,))

t1.start()
t2.start()

t1.join()
t2.join()

# Print the results from both threads
# You need to implement the logic for checking prime and Armstrong numbers in the respective functions
